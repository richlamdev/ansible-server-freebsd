# /etc/pf.conf

ext_if = "em0"
lo_if = "lo0"

# RFC 1918, RFC 5737, RFC 3927
# Add 192.168.0.0/16 if not using it
broken="224.0.0.22, 127.0.0.0/8, 172.16.0.0/12, \
        10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
        192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, \
        169.254.0.0/16, 0.0.0.0/8, 240.0.0.0/4, 255.255.255.255/32"
#broken="224.0.0.22, 127.0.0.0/8, 192.168.0.0./16, 172.16.0.0/12, \
#        10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
#        192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, \
#        169.254.0.0/16, 0.0.0.0/8, 240.0.0.0/4, 255.255.255.255/32"

#freebsd_updates="{ 204.9.55.80 63.140.118.125 198.148.79.66 147.229.9.40 }"

# allow following service(s) 
tcp_services = "{22 445 9100}"
#tcp_services = "{22 139 445}"
#udp_services = "{123 137 138}"
udp_services = "{67 68}"

# add table for bruteforce list
table <bruteforce> persist

# Modulate the initial sequence number of TCP packets.
# Broken operating systems sometimes don't randomize this number,
# making it guessable.
tcp_state="flags S/SA keep state"
udp_state="keep state"

# If you block all ICMP requests you will break things like path MTU
# discovery. These macros define allowed ICMP types. The additional
# ICMPv6 types are for neighbor discovery (RFC 4861)
icmp_types = "{echoreq, unreach}"
#icmp6_types="{echoreq, unreach, 133, 134, 135, 136, 137}"

# Don't send rejections. Just drop.
set block-policy drop

# Exempt the loopback interface to prevent services utilizing the
# local loop from being blocked accidentally.
set skip on $lo_if

# all incoming traffic on external interface is normalized and fragmented
scrub in all no-df random-id max-mss 1440

# Enable antispoofing on the local and external interface
antispoof quick for $ext_if inet

# block all ipv6 traffic incoming and outgoing
block return out quick inet6 all
block in quick inet6 all

# block all IP's added to bruteforce list
block quick from <bruteforce>

# block packets that fail reverse path check (urpf-failed)
# block packets with no route
# block broadcast address too, within table above
block in quick from { $broken urpf-failed no-route } to any

# default block all incoming 
block all 

# pass all outoing traffic on the interface and keep state of the connections
pass out quick on $ext_if inet keep state

# pass dns outoing traffic on the interface and keep state of the connections
#pass out on $ext_if proto {udp, tcp} to any port 53 keep state

# pass only http outoing traffic only for freebsd updates on the interface and keep state of the connections
#pass out on $ext_if proto tcp to $freebsd_updates port 80 $tcp_state

pass in on $ext_if inet proto tcp from any to any port $tcp_services $tcp_state (max-src-conn 6, max-src-conn-rate 5/30, overload <bruteforce> flush global)

# ***** don't forget to run following command for bruteforce IP timeout: *****
# pfctl -t bruteforce -T expire 600 (number in seconds, this case 10 minutes)

# show IP's in bruteforce list
# pfctl -t bruteforce -T show
# remove IP's from bruteforce list
# pfctl -t bruteforce -T delete <IP>

#max-src-conn is the number of simultaneous connections you allow from one host. In this example is 6.
#max-src-conn-rate is the rate of new connections allowed from any single host, here 5 connections per 30 seconds.
#overload <bruteforce> means that any host which exceeds these limits gets its address added to the table bruteforce. Our rule set blocks all traffic from addresses in the bruteforce table.
#finally, flush global says that when a host reaches the limit, that host's connections will be terminated (flushed). The global part says that for good measure, this applies to connections which match other pass rules too


# allow incoming traffic for services (see top of file for allowed services)
#pass in on $ext_if inet proto tcp from any to any port $tcp_services $tcp_state
pass in on $ext_if inet proto tcp from any to any port $udp_services $udp_state

# Allow ICMP
pass inet proto icmp all icmp-type $icmp_types keep state
#pass inet6 proto icmp6 all icmp6-type $icmp6_types keep state
